package com.xzx.xzxms.service.impl;import com.xzx.xzxms.bean.ProPool;import com.xzx.xzxms.bean.ProPoolExample;import com.xzx.xzxms.dao.ProPoolMapper;import com.xzx.xzxms.service.IProductPoolService;import com.xzx.xzxms.utils.CustomerException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.annotation.Resource;import java.util.ArrayList;import java.util.List;@Servicepublic class ProductPoolServiceImpl implements IProductPoolService {    @Resource    private ProPoolMapper proPoolMapper;    @Override    public void updateMessage(ProPool proPool) {        proPoolMapper.updateByPrimaryKeySelective(proPool);    }    @Override    public List<ProPool> findByParams(String name, String brand) {        List<ProPool> proPools;        ProPoolExample example = new ProPoolExample();        if ("".equals(name) && "".equals(brand)){            example.createCriteria().andNameIsNotNull();        }else if(!"".equals(name) && "".equals(brand)){            example.createCriteria().andNameEqualTo(name);        }else if ("".equals(name) && !"".equals(brand)){            example.createCriteria().andBrandEqualTo(brand);        }else if (!"".equals(name) && !"".equals(brand)){            example.createCriteria().andBrandEqualTo(brand).andNameEqualTo(name);        }        proPools = proPoolMapper.selectByExample(example);        return proPools;    }    @Transactional    @Override    public void batchSetInvalid(long[] ids) {        for (long id : ids){            ProPool pool = proPoolMapper.selectByPrimaryKey(id);            if (pool != null || !pool.getIsActive().equals(0)){                pool.setIsActive(0);                proPoolMapper.updateByPrimaryKeySelective(pool);            }else {                throw new CustomerException("该数据已不存在");            }        }    }    @Override    public List<ProPool> findHistoryPrices(String name, String model) {        ProPoolExample proPoolExample=new ProPoolExample();        if (("").equals(model)){            proPoolExample.createCriteria().andNameEqualTo(name);        }else {            proPoolExample.createCriteria().andNameEqualTo(name).andModelEqualTo(model);        }        List<ProPool> proPools = proPoolMapper.selectByExample(proPoolExample);        return proPools;    }}